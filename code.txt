#!/usr/bin/env bash
# Author: 4ndr0666
# ================== // üß† TWIN v0.1 ‚Äî Modular Digital Twin Interface //
## Description: üìà TWIN FEEDBACK LOGGER + LEARNING PATCH v0.4.2
# -----------------------------------------

## PYTHON PORT____________________________________________________
# import os, sys
# from pathlib import Path
# from datetime import datetime
#
# twin_dir = Path(os.environ.get("XDG_DATA_HOME", str(Path.home() / ".local/share"))) / "twin"
# map_file = twin_dir / "feature-map.txt"
# log_file = twin_dir / "feedback.csv"
# twin_dir.mkdir(parents=True, exist_ok=True)
# log_file.touch(exist_ok=True)
# map_file.touch(exist_ok=True)
#
# query = sys.argv[1] if len(sys.argv) > 1 else "[undefined]"
# timestamp = datetime.now().isoformat()
#
# rating = input("‚≠ê Was this helpful? [y/n]: ").strip().lower()
# comment = input("üìù Optional comment: ")
#
# with log_file.open("a") as f:
#     f.write(f"{timestamp},{query},{rating},\"{comment}\"\n")
#
# if rating == "n":
#     print("üß† Let's improve this mapping.")
#     new_cmd = input(f"üîÅ What command should '{query}' execute instead? ").strip()
#     if new_cmd:
#         entry = f"{query} | {new_cmd}"
#         if entry not in map_file.read_text():
#             with map_file.open("a") as f:
#                 f.write(f"{entry}\n")
#             print("‚úÖ Updated mapping saved to feature-map.txt")
#             with log_file.open("a") as f:
#                 f.write(f"{timestamp},[learned],{entry}\n")
#         else:
#             print("‚ö†Ô∏è Mapping already exists. No changes made.")
#     else:
#         print("‚ö†Ô∏è No command entered. Mapping unchanged.")
# print("‚úÖ Feedback logged.")
# ------------------------------------------------------------------

## Globals

EXO_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/exocortex"
MAP_FILE="$EXO_DIR/feature-map.txt"
LOG_FILE="$EXO_DIR/feedback.csv"

mkdir -p "$EXO_DIR"
touch "$LOG_FILE" "$MAP_FILE"

## Query and Timestamp

QUERY="${1:-[undefined]}"
TIMESTAMP="$(date +%F_%T)"

## Prompt for Rating and Comment

read -rp "‚≠ê Was this helpful? [y/n]: " rating
read -rp "üìù Optional comment: " comment

## Log Feedback
echo "$TIMESTAMP,$QUERY,$rating,\"$comment\"" >> "$LOG_FILE"
## Learning and Remap Logic

if [[ "$rating" == "n" ]]; then
	echo "üß† Let's improve this mapping."
	read -rp "üîÅ What command should '$QUERY' execute instead? " new_cmd
	if [[ -n "$new_cmd" ]]; then
		entry="$QUERY | $new_cmd"

		if ! grep -Fxq "$entry" "$MAP_FILE"; then
			echo "$entry" >> "$MAP_FILE"
			echo "‚úÖ Updated mapping saved to feature-map.txt"
			echo "$TIMESTAMP,[learned],$entry" >> "$LOG_FILE"
		else
			echo "‚ö†Ô∏è Mapping already exists. No changes made."
		fi
	else
		echo "‚ö†Ô∏è No command entered. Mapping unchanged."
	fi
fi

## Final Acknowledgement

echo "‚úÖ Feedback logged."
#!/usr/bin/env bash
# Author: 4ndr0666
# Version: v0.4.2
set -euo pipefail
# =================== // TWIN_CTRL.SH //

## PYTHON PORT ____________________________________________________________________
    # import os, sys
    # from pathlib import Path
    #
    # exo_dir = Path(os.environ.get("XDG_DATA_HOME", str(Path.home() / ".local/share"))) / "twin"
    # map_file = exo_dir / "feature-map.txt"
    # exo_dir.mkdir(parents=True, exist_ok=True)
    #
    # query = " ".join(sys.argv[1:]).strip()
    # if not query:
    #     print("‚ö†Ô∏è Empty or invalid input. Logging...")
    #     # call exo_score.py here
    # ----------------------------------------------------------------------------

## Globals

TWIN_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/exocortex"
MAP_FILE="$TWIN_DIR/feature-map.txt"
mkdir -p "$TWIN_DIR"

## Project Path

rootpath() {
    local src="${BASH_SOURCE[0]:-$0}"
    [[ -L "$src" ]] && dirname "$(readlink "$src")" || dirname "$src"
}

## TRAP

TEMP_FILES=()
cleanup_all() {
    for f in "${TEMP_FILES[@]}"; do
        [[ -f "$f" ]] && rm -f "$f"
    done
}
trap 'cleanup_all' EXIT INT TERM ERR

## Validate

validate_input() {
    local input="$1"
    if [[ -z "$input" || "${input// /}" = "" ]]; then
        echo "‚ö†Ô∏è Empty or invalid input. Routing to feedback loop..."
        "$(rootpath)/exo_score.sh" "[undefined]"
        exit 0
    fi
}

## Fuzzy Matching

fuzzy_match() {
    if command -v fzf >/dev/null 2>&1; then
        echo "üß† No direct match found. Launching fuzzy selector..."
        cut -d'|' -f1 "$MAP_FILE" | fzf --prompt="Twin command: "
    else
        echo "‚ùå fzf not installed. Routing to feedback loop..."
        "$(rootpath)/exo_score.sh" "$QUERY"
        exit 0
    fi
}

## Sanitize

sanitize_command() {
    local candidate="$1"
    if echo "$candidate" | grep -qE 'rm\s+-rf|:?\(\)\s*\{'; then
        echo "‚ö†Ô∏è Suspicious command detected. Logging attempt..."
        "$(rootpath)/exo_score.sh" "$QUERY"
        exit 0
    fi
}

## PYTHON PORT_________________________________________________
    # if not match:
    #     print("üß† No direct match found. Launching fuzzy selector...")
    #     try:
    #         import subprocess
    #         choices = subprocess.check_output(f"cut -d'|' -f1 {map_file}", shell=True, text=True)
    #         selected = subprocess.run(["fzf", "--prompt=Twin command: "],
    #                                   input=choices, capture_output=True, text=True).stdout.strip()
    #         for line in map_file.open():
    #             if line.startswith(selected):
    #                 match = line.strip()
    #                 break
    #     except FileNotFoundError:
    #         print("‚ùå fzf not installed. Exiting.")
    #         sys.exit(1)
    # --------------------------------------------------------------

## Match Logic

execute_match() {
    local match="$1"
    sanitize_command "$match"
    echo "üéØ Found match: $match"
    eval "${match#*|}"
    "$(rootpath)/exo_score.sh" "$QUERY"
}

## PYTHON PORT___________________________________________________
    # match = None
    # with map_file.open() as f:
    #     for line in f:
    #         if line.lower().startswith(query.lower()):
    #             match = line.strip()
    #             break
    # if not match:
    #     selected = subprocess.run([...fzf logic...])
    #     if selected:
    #         for line in map_file:
    #             if line.startswith(selected):
    #                 match = line.strip()
    #                 break
    # if match:
    #     os.system(match.split('|', 1)[1].strip())
    #     call exo_score.py
    # else:
    #     call exo_score.py(query)
    # ___________________________________________________________________________________

## Main Entry Point

QUERY="$*"
validate_input "$QUERY"
match=$(grep -i -m 1 "^$QUERY[[:space:]]*|" "$MAP_FILE" || true)
if [[ -z "$match" ]]; then
    QUERY=$(fuzzy_match)
    match=$(grep -i -m 1 "^$QUERY[[:space:]]*|" "$MAP_FILE" || true)
    [[ -z "$match" ]] && {
        echo "‚ùå Nothing selected. Logging..."
        "$(rootpath)/exo_score.sh" "$QUERY"
        exit 0
    }
fi

execute_match "$match"
#!/usr/bin/env bash
# Author: 4ndr0666
# ===================== // EXO_SCORE.SH //
## Description: üìà EXO FEEDBACK LOGGER + LEARNING PATCH v0.4
# ------------------------

# PYTHON PORT: ___________________________________________________________________________
# import os, sys
# from pathlib import Path
# from datetime import datetime
#
# exo_dir = Path(os.environ.get("XDG_DATA_HOME", str(Path.home() / ".local/share"))) / "twin"
# log_file = exo_dir / "feedback.csv"
# log_file.parent.mkdir(parents=True, exist_ok=True)
# timestamp = datetime.now().isoformat()
# query = sys.argv[1] if len(sys.argv) > 1 else "[undefined]"

### üîπ Bash Globals

EXO_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/exo"
mkdir -p "$EXO_DIR"
LOG_FILE="$EXO_DIR/feedback.csv"
touch "$LOG_FILE"
QUERY="$1"
TIMESTAMP="$(date +%F_%T)"

### üîπ Prompt for Rating and Comment

read -rp "‚≠ê Was this helpful? [y/n]: " rating
read -rp "üìù Optional comment: " comment

### üîπ Log the Entry

echo "$TIMESTAMP,$QUERY,$rating,\"$comment\"" >> "$LOG_FILE"

### üîπ If "No", Trigger Remapping Flow

if [[ "$rating" == "n" ]]; then
    echo "üß† Let's improve this mapping."
    read -rp "üîÅ What command should '$1' execute instead? " new_cmd
fi

### üîπ Remap Suggestion and Deduplication

    if [[ -n "$new_cmd" ]]; then
        MAP_FILE="$EXO_DIR/feature-map.txt"
        ENTRY="$QUERY | $new_cmd"

        ### prevent dupes
        if ! grep -Fxq "$ENTRY" "$MAP_FILE"; then
            echo "$ENTRY" >> "$MAP_FILE"
            echo "‚úÖ Updated mapping saved to feature-map.txt"
            echo "$TIMESTAMP,[learned],$ENTRY" >> "$LOG_FILE"
        else
            echo "‚ö†Ô∏è Mapping already exists. No changes made."
        fi
    else
        echo "‚ö†Ô∏è No command entered. Mapping unchanged."
    fi

### üîπ Final Acknowledgement

echo "‚úÖ Feedback logged."
#!/usr/bin/env bash
# Author: 4ndr0666
# =================== // EXO_UI.SH //
## Description: üß≠ Interactive selector using whiptail
# ----------------------------

## PYTHON PORT ___________________________________________________________
# from pathlib import Path
# from prompt_toolkit.shortcuts import radiolist_dialog
# map_file = Path(os.environ.get("XDG_DATA_HOME", str(Path.home() / ".local/share"))) / "exocortex" / "feature-map.txt"
# options = [(line.split('|')[0].strip(), line.strip()) for line in map_file.open()]
# result = radiolist_dialog(
#     title="EXOCORTEX COMMAND SELECTOR",
#     text="Choose a task for your digital twin:",
#     values=options
# ).run()
# if result:
#     subprocess.run(["exocortex", result])
# ________________________________________________________________________

## üîπ Path Resolution

rootpath() {
    local source="${BASH_SOURCE[0]:-$0}"
    if [[ -L "$source" ]]; then
        dirname "$(readlink "$source")"
    else
        dirname "$source"
    fi
}

### PYTHON PORT_____________________________
    # from pathlib import Path
    # root_path = Path(__file__).resolve().parent
    # ------------------------

## üîπ Feature Map and Menu Construction

MAP="${XDG_DATA_HOME:-$HOME/.local/share}/twin/feature-map.txt"
OPTIONS=()

### PYTHON PORT___________________________________
    # with open(map_file) as f:
    #     options = [(line.split('|')[0].strip(), line.strip()) for line in f]
    # ------------------------------

while IFS='|' read -r label cmd; do
    OPTIONS+=("$label" "$cmd")
done < "$MAP"

## üîπ Whiptail Menu & Dispatch

### PYTHON PORT__________________________________
    # from prompt_toolkit.shortcuts import radiolist_dialog
    # result = radiolist_dialog(
    #     title="EXOCORTEX COMMAND SELECTOR",
    #     text="Choose a task for your digital twin:",
    #     values=options
    # ).run()
    # --------------------------------

CHOICE=$(whiptail --title "EXOCORTEX COMMAND SELECTOR" \
                  --menu "Choose a task for your digital cortex:" 20 78 10 \
                  "${OPTIONS[@]}" \
                  3>&1 1>&2 2>&3)

if [[ -n "$CHOICE" ]]; then
    "$(rootpath)/exocortex" "$CHOICE"
else
    echo "‚ö†Ô∏è No selection made."
fi
#!/usr/bin/env bash
# Author: 4ndr0666
# Version: 0.4
# ===================== // VALIDATE_MAP.SH //
## Description: Validates all entries in feature-map.txt by checking:
#              - Command executable exists
#              - Feature label present
#              - Valid delimiter
#              - Command syntax appears valid
#              - Duplicate label detection
# ------------------------------------------------------------

## PYTHON PORT ___________________________________________________________
# from pathlib import Path
# import shutil
# seen = set()
# for line in map_file.open():
#     if '|' not in line:
#         warn("Missing delimiter")
#     key, cmd = line.split('|', 1)
#     key, cmd = key.strip(), cmd.strip()
#     if key in seen:
#         warn("Duplicate key")
#     seen.add(key)
#     if shutil.which(cmd.split()[0]) is None:
#         warn("Command not found")
# ________________________________________________________________________

## Globals

MAP_FILE="${XDG_DATA_HOME:-$HOME/.local/share}/exocortex/feature-map.txt"
[[ ! -f "$MAP_FILE" ]] && { echo "‚ùå Map file not found: $MAP_FILE"; exit 1; }

echo "üîç Validating: $MAP_FILE"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

total=0
errors=0
declare -A seen_labels

while IFS= read -r line || [[ -n "$line" ]]; do
    ((total++))
    ### Empty Line Check

    if [[ -z "$line" || "${line// /}" == "" ]]; then
        echo "‚ö† Line $total: Empty line"
        ((errors++))
        continue
    fi

    ### Delimiter check
    if [[ "$line" != *"|"* ]]; then
        echo "‚ö† Line $total: Missing delimiter ‚Üí '$line'"
        ((errors++))
        continue
    fi

    IFS='|' read -r label command <<< "$line"
    label=$(echo "$label" | xargs)
    command=$(echo "$command" | xargs)

    ### Empty label or command check
    if [[ -z "$label" || -z "$command" ]]; then
        echo "‚ö† Line $total: Incomplete mapping ‚Üí '$label | $command'"
        ((errors++))
        continue
    fi

    ### Duplicate label check
    if [[ -n "${seen_labels[$label]+_}" ]]; then
        echo "‚ö† Line $total: Duplicate label '$label' (previously defined on line ${seen_labels[$label]})"
        ((errors++))
        continue
    else
        seen_labels["$label"]=$total
    fi

    ### Check if command is prompt: only
    if [[ "$command" =~ ^(prompt:) ]]; then
        echo "‚úî Line $total: $label ‚Üí (prompt only)"
        continue
    fi

    ### Extract command name and check if available
    bin="${command%% *}"
    if command -v "$bin" &>/dev/null; then
        echo "‚úî Line $total: $label ‚Üí $bin"
    else
        echo "‚ö† Line $total: Command not found ‚Üí '$bin'"
        ((errors++))
    fi
done < "$MAP_FILE"

echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
if [[ "$errors" -eq 0 ]]; then
    echo "‚úÖ All $total entries are valid."
else
    echo "‚ùå $errors issue(s) found."
    exit 1
fi
